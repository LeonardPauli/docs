[ req ]
default_bits = 2048
default_keyfile = server-key.pem # \(req.keyfile.default)
distinguished_name = subject
req_extensions = req_ext
x509_extensions = x509_ext
string_mask = utf8only

# seems like OpenSSL doesn't care about the contents of this section,
# but the certificate reader (browser) does?
# (why it becomes a "form", with:
# 	- key = description
# 	- key_default = default value
# 	- -subj="/key=actual value/key2=..."
[ subject ]
countryName = Country Name (2 letter code)
stateOrProvinceName = State or Province Name (full name)
localityName = Locality Name (eg, city)
organizationName = Organization Name (eg, company)
commonName = Common Name (e.g. server FQDN or YOUR name)
emailAddress = Email Address

countryName_default = US # \(subject.country)
stateOrProvinceName_default = NY # \(subject.stateOrProvince)
localityName_default = New York # \(subject.locality)
organizationName_default = Example, LLC # \(subject.organization)
commonName_default = Example Company # \(subject.commonName)
emailAddress_default = test@example.com # \(subject.emailAddress)

# used for self-signed certificate // openssl req -x509 ...
[ x509_ext ]
authorityKeyIdentifier = keyid,issuer
subjectKeyIdentifier = hash
basicConstraints = CA:FALSE
keyUsage = digitalSignature, keyEncipherment # \(req.ext.keyUsage | join ", ")
subjectAltName = @alternate_names
nsComment = "OpenSSL Generated Certificate" # CHANGE (optional)
# extendedKeyUsage = serverAuth, clientAuth # \(req.ext.snippet)

# used for certificate signing request // openssl req ...
[ req_ext ]
subjectKeyIdentifier = hash
basicConstraints = CA:FALSE
keyUsage = digitalSignature, keyEncipherment # \(req.ext.keyUsage | join ", ")
subjectAltName = @alternate_names
nsComment = "OpenSSL Generated Certificate" # CHANGE (optional)
# extendedKeyUsage = serverAuth, clientAuth # \(req.ext.snippet)

[ alternate_names ]
DNS.0 = localhost
DNS.1 = 127.0.0.1
DNS.2 = example.com
 # \(subject.alternate |> "DNS.\(index+1) = \(it)" | join "\n")

