# terminal/ssl/using-ca
' LeonardPauli/docs
	Created by Leonard Pauli, 24,29 mar 2018

// CA - Certificate Authorithy


CA.local-dev.create-and-install {NAME: "nginx.example test CA"}
	// https://deliciousbrains.com/ssl-certificate-authority-for-local-https-development/
	- key.private.create: openssl genrsa -out myCA.key 2048
		// use -des3 (instead of -nodes) to encrypt key with passphrase (store in 1password or similar)
		// just to prevent anyone that happens to come over the file to create certs trusted by your computer
		// though if they get the file, there will be bigger issues, and it will be limited to SSL (see below), and only used for local development...
	- cert.root.create: openssl req -x509 -new -nodes -key myCA.key -sha256 -days 365 -out myCA.pem -subj "/CN=NAME"
	- CA.cert.root.install
		- on OSX: // (possibly requires browser restart)
			- open /Applications/Utilities/Keychain\ Access.app/
			- File -> Import Items... (⌘⇧I)
			- search (⌘⌥F): NAME
			- double click it, expand trust section, change SSL to Always trust, close, enter password


cert.create-using-CA {USERFACINGNAME: "my-app.dev cert", DOMAINS: "localhost", "my-app.localhost", "local.my-app.com"}
	- a signing-request
		- key.private.create: openssl genrsa -out domain.key 2048
		- signing-request.create: openssl req -new -key domain.key -out domain.csr -subj "/CN=USERFACINGNAME"
	- send it + domain names to CA for signed cert creation // you keep the private key?
		- config.create: vi domain.ext // TODO: if this is the same kind of file as in self-signed... DRY it up?
			authorityKeyIdentifier=keyid,issuer
			basicConstraints=CA:FALSE
			keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment # sure of all of those?
			subjectAltName = @alt_names

			[alt_names]
			DNS.1 = DOMAINS.0
			DNS.2 = DOMAINS.1
			# etc
		- CA.cert.create with req: openssl x509 -req -sha256 -days 365 \
			-CA myCA.pem -CAkey myCA.key -CAcreateserial \
			-extfile domain.ext -in domain.csr -out domain.crt
