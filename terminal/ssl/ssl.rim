# terminal/ssl
' LeonardPauli/docs
	Created by Leonard Pauli, 19 mar 2018

// secure sockets layer
// 	- a cryptographic protocol

// see https://gist.github.com/Soarez/9688998


general:
	// https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs
	relative:
		harder encryption usually costs more processing power / time
		with faster computers, both encrypt, decrypt, and cracking gets faster
			-> harder encryption is needed
		encryption algorithm / parameters thereby (presumably) needs to be changed with time


dictionary:
	TLS: "transport layer security"
	SSL: "secure sockets layer"
	forward secrecy: // long-term keys do not compromise past session keys
		alias: "perfect forward secrecy"
		' use new derivation of private key for each session,
			keeping data (ssl traffic) captured before main-private-key
			leak unaffected (non-decryptable with leaked key)
		"Diffie-Hellman key exchange" // method for cryptographic keys exchange over public channel
			DHE: "Ephemeral Diffie-Hellman" // ?
	cipher suite // subset of algorithms used to secure a network connection (using TSL or SSL)
	ephemeral // short lived
	MITM: "man in the middle attack" // traffic goes through hacker (with the ability to read and change data in both directions, even though it might be encrypted from both ends)
	asymetric algorithm // eg. easy to get public key from private key, hard to get priv from pub
	public key // share openly, generated with private key
	private key // keep secret, allows decryption of data encrypted with public key
	public key certificate // file used to prove public key ownership
		alias: "cert"
	CA: "Certificate Authority" // entity that issues digital certificates, some pre-trusted by clients
	OCSP: "Online Certificate Status Protocol" // service by CA for clients to verify a server cert is valid (/ hasn't been revoked?)
	OCSP stapling // cache OCSP response on server and attach to client request if wanted (so they don't have to make an additional one to the CA)
		// https://raymii.org/s/tutorials/OCSP_Stapling_on_nginx.html
	HSTS: "HTTP Strict Transport Security" // browsers, for domain: limits to use https (even before first contact with server - pre-set in browser)
	HPKP: "HTTP Public Key Pinning" // browsers, for domain: limits acceptable certs (even before first contact with server - pre-set in browser)
		- HSTS with HPKP ensures secure end-to-end connection, even before first handshake, because relevant info is bundled with browser source code



certificate.create:
	- self-signed: see "./self-signed"
	- using lets-encrypt // TODO



signing-request: see "./self-signed"."signing request"
p12 bundle:
	from key and certificate: openssl pkcs12 -inkey key.pem -in certificate.pem -export -out certificate.p12
	validate: openssl pkcs12 -in certificate.p12 -noout -info
self-signed.auto-renewing
	// TODO
see nginx.ssl


// TODO
- using lets encrypt
	- test environment
	- using docker + existing nginx for validation
	- automated renewal // cron job?
	- production environment
- hstspreload
	// see https://hstspreload.org/
	test: "https://hstspreload.org/"
- setup on lpm
- update deploy + server setup notes


' some references: (?)
	- https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-in-ubuntu-16-04
	- http://nginx.org/en/docs/http/configuring_https_servers.html
	- https://miki725.github.io/docker/crypto/2017/01/29/docker+nginx+letsencrypt.html
	- http://www.automationlogic.com/using-lets-encrypt-and-docker-for-automatic-ssl/
	- https://certbot.eff.org/docs/using.html#webroot
	- https://www.digitalocean.com/community/tutorials/how-to-use-certbot-standalone-mode-to-retrieve-let-s-encrypt-ssl-certificates
	- https://certbot.eff.org/docs/install.html#running-with-docker
	- https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs
