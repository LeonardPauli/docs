# terminal
' LeonardPauli/docs
	Created by Leonard Pauli, 19 mar 2018

// text based access to os

// TODO
// https://www.tldp.org/LDP/abs/html/fto.html

customize:
	- install ohmyzsh // framework for managing zsh configuration
		// see https://github.com/robbyrussell/oh-my-zsh
		sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
		// probably a good idea to check its contents first? or trust the community :)
		// see ~/.oh-my-zsh/plugins
	- see edit bashrc


repl: // read, evaluate, print, loop
	prompt: where you write, hit enter to evaluate
		eg. > echo "hello"<enter> // should show hello back
	first word is the command; an executable program, see "create executable script"

acquire information:
	// see https://learnxinyminutes.com/docs/bash/
	- man command // show manual page for command
		q // to exit
		/ // to search
			n/N // for next/prev match
		space // page down
		man command > file // write man page to file
	- command -h
	- command --help
	- command help
	- which command // show command location / path
	- alias // if using ohmyzsh

navigation
	- pwd // process working directory / current directory path
	- ls // list files/folders
		alt: dir
		ls -la // show all files as list
		ls subdir // list files in subdir
	loop through files
		// don't use ls in scripts, see http://mywiki.wooledge.org/ParsingLs
		for f in *; do [[ -e $f ]] || continue; echo "$f"; done
		flags:
			// https://www.tldp.org/LDP/abs/html/fto.html
			- -a: exists // -e is deprecated?
			- -f: regular file
			- -d: directory
			- -s: zero size
			
			- -b: block device // eg. file system, /dev/sda2
			- -c: character device // eg. tty, /dev/ttyS1
			- -t: file descriptor accociated with terminal device
				[ -t 0 ] // check if stdin is terminal
				[ -t 1 ] // check if stdout is terminal
			// TODO: p: pipe; h/L: symbolic link; S: socket; ...

			- -N: was modified since last read
			- [[ f1 -nt f2 ]]: f1 newer than f2 // ot: older than

	- cd // change directory
		cd .. // go up one level
		cd ... // go up two levels
		cd . // current directory
		cd ~ // go home
		cd / // root
		cd some/relative/path
		cd - // go back (to previous location)
		cd -2 // go back two times
		d // show cd history, ohmyzsh specific
		<Number> // jump to to cd history entry, ohmyzsh specific
	- find
		// https://unix.stackexchange.com/questions/314804/how-to-make-bash-glob-a-string-variable
		array variables?
	- tree // how to install?
	- lsoutline: // see "edit bashrc" for how to "install"
		// TODO: add exclude + depth flagged arguments
		lsoutline () {
			local p="${1:-.}"
			local indent="${2-""}"
			([[ $p = "files" ]] || [[ $p = "node_modules" ]] || [[ $p = ".DS_Store" ]]) && return;
			[[ -f $p ]] && echo "$indent$p";
			if [[ -d $p ]]; then
				local savedpwd="$(pwd)"; cd $p
				echo "$indent$p"
				[ "$(ls -A)" ] && (for f in $(echo $(ls -A)); do lsoutline $f "$indent\t"; done)
				cd $savedpwd
			fi
		}

files:
	- mkdir folder // make directory
	- mkdir -p a/path/folder // create intermediate directories as well
	- touch file // create empty file
	- rm file // remove file
		rm -rf folder // remove recurcive (all contents) force (no question, otherwise shown if not empty) folder
	- cat file // copy file contents into terminal
	- echo "text" // write text into terminal
	- mv a b // move / rename
	- cp a b // copy
	- cp -R a b // copy directory

	temporary:
		MYTMPDIR=$(mktemp -d) // remove -d for file (path)
		cleanup: trap "rm -rf $MYTMPDIR" EXIT
			// makes sure it's cleaned up upon (unexpected + normal) exit

	links:
		// see https://linuxgazette.net/105/pitcher.html
		ln source.file target // hard (ie. data/inode exists once with two files pointing at it, data will be rm:ed when all pointers are rm:ed)
			// files only, could manually mkdir + ln the contents though
		ln -s source.file target // symbolic (ie. data/inode exists once with one file pointing at it, and one link pointing at the file. rm/mv:ing the file makes the link broken)
			// should work for directory as well (but abs paths required?)
			// can be done even if source doesn't exist at the moment

text processing:
	- grep
		cat file | grep -E "search phrase"
		grep -o // only show output
	- sed
		echo "hej world" | sed "s/hej/hello/g"
		echo "ca.b" | sed -E "s/a\.b|^c/x/g"
			"-E": extended regex
				- "|":  or
				- "^": start of string
			"g": global // match multiple time in same line
		TAB=$'\t'; echo "..." | sed -E "s/${TAB}//g" // remove tabs
			// "\t" doesn't always work is sed
			// alt. (ctrl-v, tab), to insert tab char directly
			// https://stackoverflow.com/questions/2610115/why-is-sed-not-recognizing-t-as-a-tab
	- pbcopy // copy to clipboard
		echo "..." | pbcopy

	string manipulation:
		// see https://www.tldp.org/LDP/abs/html/string-manipulation.html

		split + map over string:
			# usage: t="";fn(){t+="$2: $1\n";};itera fn "," "some,values,here";echo $t
			itera () { local fn=${1:-"echo"} del=${2:-","} xs=${3:-"a,b,c"} i=0;
				while [ "$xs" ]; do x=${xs%%$del*}
					$fn "$x" $((i++))
				[ "$xs" = "$x" ] && xs='' || xs="${xs#*$del}"; done
			}

syntax
	standard
		- stdout
		- stdin
		- stderr
	null device:
		/dev/null // discards any data it receives
	redirect:
		a > file // (redirect) write stdout to file
		a | tee file // what really happens? also, when requiring sudo for write access to file:
		a | sudo tee file // "sudo a > file" won't work because file is opened for read before sudo ticks in?
			// see https://askubuntu.com/questions/103643/cannot-echo-hello-x-txt-even-with-sudo
		a >> file // (redirect) append stdout to file (why files should always end with empty new line)
		a | tee -a file
		> // stdout
		>> // append stdout
		1> // stdout
		2> // stderr
		&> // stdout and stderr (newer syntax)
		a > file 2>> err // write output to file, and append error output to err file
		a &> /dev/null // discard both stdout and stderr output
		a 1> /dev/null 2>&1 // same as above; redirect stdout to null device (discard), and redirect stderr to stdout (ie. also to stdout)

	operators:
		- a & b // run both "async"?
		- a && b // run second if first ok
		- a || b // run second if first err?
		- a | b // "pipe" stdout from a to stdin of b

	loops:
		- xs="a b c"; for x in $(echo "$xs"); do echo $x; done // possibly need "unset IFS" or "IFS=' '" first
		- xs=("a" b 'c'); for x in $xs; do echo $x; done

executable.create: // script
	- vi mycommand // seems better to use (more platform independent, though permission issue?): #!/usr/bin/env
		#!/bin/bash # aka "shebang", indicating path to program to send the rest of the file to for execution
		echo "hello there"
	- chmod u+x file // change mode; add User eXecutable permission to file
	- ./mycommand // run script
	- PATH=PATH:$(pwd) // temporarily add current folder to "PATH", allows you to write mycommand directly, see "edit bashrc" for persistant
	- mycommand // run script as any other

executable
	time ... // "time command execution"


bashrc.edit: // rc: "run commands"
	// TODO
	vi ~/.bashrc
	vi ~/.zshrc
		plugins=(git)

		export PATH=PATH:/some/path # if no export, it will only be scoped to file?

		# add sources for autocomplete
		export CDPATH="." # ".:~/projects/client-work"

		# program shortcuts
		alias sub='open "$(ls | grep .sublime-project)"'
		alias lint='npm run lint'

		# project shortcuts
		alias lpm='cd ~/projects/own/leonardpauli-me'
		alias lpmd='cd ~/projects/own/leonardpauli-me && npm run dev'

		# workflow
		function gitp() {
			branchname=$(git rev-parse --abbrev-ref HEAD)
			issuenr=$(echo "$branchname" | grep -oE "^\d+" | head -1 | grep -oE "\d+")
			issuenrhash=$([ -z $issuenr ] && echo "" || echo "#$issuenr ")
			git add *
			git commit -am "$issuenrhash$*"
			git push -u origin "$branchname"
		}

		tabs -2 # set tab-width
	source ~/.zshrc

	with ohmyzsh:
		"> alias": show all aliases
		// TODO: some are only with zsh, some are generic
		"> history": view recent commands
			<ctrl-r><phrase>: search backwards in history after phrase
				<ctrl-r> again: next match
		arrow (up / down): load (prev / next) executed command into prompt



variables:
	local: local x=... // global by default, pitfal in recursive loops etc
		// http://tldp.org/LDP/abs/html/localvar.html
		// use local as much as possible
	default value syntax:
		// https://stackoverflow.com/questions/9332802/how-to-write-a-bash-script-that-takes-optional-input-arguments
		- ${1:-foo}
		- ${myvar-defaultvalue}

loops
	see variables.local
	// TODO

function
	see variables.local
	see lsoutline for example
	see files.temporary.cleanup
	definition styles:
		- "function my_function { echo hello; return 'hi' }"
		- "my_function () { echo hello; return 'hi' }"
	arguments:
		// see https://stackoverflow.com/a/30033822/1054573

server.troubleshooting: // from https://news.ycombinator.com/item?id=16685452, lazyant
	uptime # uptime and CPU stress
	w # or better yet: last | head # who is/has been in
	netstat -tlpn # find server role
	df -hi # check inode availability + free memory (out of disk space?)
	grep kill /var/log/messages # out of memory?
	ps auxf # what's running
	htop # (alt. top) stressed?, look out for D (waiting on I/O typically) processes
	history # what has changed recently
	tail /var/log/application.log # anything interesting logged?



cronjob: // helper for interacting with cron (from greek work for time), scheduled-command-execution
	// deamon should launch on system start and will check config every minute
	// see https://askubuntu.com/questions/2368/how-do-i-set-up-a-cron-job
	format: "https://crontab.guru/#*/5_*_*_*_*"
		- minute, hour, day in month, month (jan - dec, 1-12), day in week (sun - sat, 0-6)
		- *: any
		- */1: everyone
		- 1: when it is 1
	example:
		- */1 * * * * echo "hello $(whoami) $(date) $(pwd)" >> Documents/hello.txt // every minute
			// hello leonardpauli Thu Mar 29 14:37:00 CEST 2018 /Users/leonardpauli
			// hello leonardpauli Thu Mar 29 14:38:00 CEST 2018 /Users/leonardpauli
			// etc
		- 0 0 */2 * * command // execute command every second day at 00:00
	edit.after: /etc/init.d/cron reload // should normally not be necessary, but gotchas with symlinks etc
	edit.interactively: crontab -e // add your lines, and ":wq", it will check every minute, + run as your user
	edit.programmatically:
		add: (crontab -l && echo "*/1 * * * * command # some-id-or-tag") | crontab -
		view: crontab -l
		remove: (crontab -l | sed -e "s/.* # some-id-or-tag//g") | crontab - // lookout for regex chars in tag, or be safe and stic to alpha-num

	email output/error: // ???
		MAILTO=email@domain.com