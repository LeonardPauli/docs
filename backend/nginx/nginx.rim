# terminal/nginx
' LeonardPauli/docs
	Created by Leonard Pauli, 23 mar 2018

// [engine X] - a server
// 	- "an HTTP and reverse proxy server, a mail proxy server, and a generic TCP/UDP proxy server"
//	- https://nginx.org/en/


NOTE: see "example/setup.rim" first


install:
	using custom dockerfile: // assumes: mkdir nginx && vi nginx/default.conf # see config
		FROM alpine:3.7

		# install nginx
		RUN apk add --update nginx \
			&& rm -rf /var/cache/apk/* \
			&& mkdir -p /run/nginx

		# layer nginx config + set start
		COPY ./nginx/ /etc/nginx/conf.d/
		ENTRYPOINT ["/usr/sbin/nginx", "-g", "daemon off;"]
		EXPOSE 80

	' using pre-made dockerfile:
		// see https://github.com/nginxinc/docker-nginx/blob/72ac2226580ee73c170163dbe6e4436373b6ece9/stable/alpine/Dockerfile
		// COPY nginx.conf /etc/nginx/nginx.conf
		// COPY nginx.vh.default.conf /etc/nginx/conf.d/default.conf
	' using default install on ubuntu:
		default config files: ...
		default naming patterns: ...
			// https://support.hypernode.com/knowledgebase/create-reusable-config-for-custom-snippets/
			possibly auto-included files // ?
				- staging.*
				- server.*
				- public.*
				- http.*



features:

	static response:
		server {
			listen 80; listen [::]:80;
			server_name _;
			default_type text/plain;
			return 200 "hello world";
		}

	// route to other server 
	// route on domain name + multiple
	// route on port
	// route on path
	
	static-files:
		see caching.for static-files
		see compression

		example:
			location ~ ^/public/ { root /some/abs/path/public-dist; }

		multimedia // TODO: use nginx plugins for more efficient video/audio streaming?
		rewrite away file extension // TODO
		
		disable index: autoindex off;

		error-pages
			not-found // ie. 404 page
				error_page 404 /index.html;
			other // eg. 503
				// TODO

	proxy: // eg. pass to other local server
		- directly: // in server block
			location / { proxy_pass http://127.0.0.1:3000; }
		- using upstream: // in http block
			upstream myproject { server 127.0.0.1:3000; }
			server {
				listen 80;
				server_name domain.com;
				location / { proxy_pass http://myproject; }
			}
		- with headers? // TODO: what good for?
			location /gun {
				proxy_pass http://gunjs:3052;
				proxy_http_version 1.1;
				proxy_set_header Upgrade $http_upgrade;
				proxy_set_header Connection 'upgrade';
				proxy_set_header Host $host;
				proxy_cache_bypass $http_upgrade;
			}


		see compression
		see caching
			example:
				// https://www.nginx.com/resources/wiki/start/topics/examples/reverseproxycachingexample/
				http {
					proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=STATIC:10m
					inactive=24h max_size=1g;
					server {
						location / {
							proxy_pass http://1.2.3.4;
							proxy_set_header Host $host;
							proxy_cache STATIC;
							proxy_cache_valid 200 1d;
							proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
						}
					}
			}


	loadbalancer // TODO
		example:
			http {
				upstream myproject {
					server 127.0.0.1:8000 weight=3; // TODO: how does weight work? default 1?
					server 127.0.0.1:8001;
					server 192.168.0.1:8000;
				}
				server { // put access_log here if wanted (and not in destinations - one log instead of many)
					listen 80;
					server_name domain.com;
					location / { proxy_pass http://myproject; }
				}
			}

	simple-firewall // TODO // using ip-address white list
		deny all;
		allow 10.0.0.0/8;
		allow 172.16.0.0/12;
		allow 192.168.0.0/16;

	caching:
		// see https://docs.nginx.com/nginx/admin-guide/content-cache/content-caching/
		// eg. for static-files and proxied req responses
		// note that caching might happen in multiple places, sometimes tricky to debug
		if:
			- recalculation / fetching is slow
			- result is pure // or freshness isn't important
				- eg. doesn't depend on indata // eg. logged in user
				- eg. doesn't change with time // or changes rarely

		see compression.before caching
		clear: ...

		example:
			expires -1; // never
			expires 1y; // one year, no way to invalidate after sent? use webpack file hash
			access_log off;
			add_header Cache-Control "public"; // what for?


	compression:
		// see https://docs.nginx.com/nginx/admin-guide/web-server/compression/
		if:
			- not already compressed
				- eg. jpg
				- eg. already done by upstream / proxy source
			- the cost in CPU time is worth the saving in bandwidth

		before caching // TODO: is this default or manual action needed?

		example: // TODO: check
			gzip on;
			gzip_disable "msie6";
			gzip_vary on;
			gzip_min_length 128;
			gzip_buffers 128 32k;
			gzip_comp_level 6;
			gzip_proxied any;
			gzip_types text/plain text/css text/x-component text/xml application/xml application/xhtml+xml application/json image/x-icon image/bmp image/svg+xml application/atom+xml text/javascript application/javascript application/x-javascript application/pdf application/postscript application/rtf application/msword application/vnd.ms-powerpoint application/vnd.ms-excel application/vnd.ms-fontobject application/vnd.wap.wml application/x-font-ttf application/x-font-opentype;

	logs:
		access:
			http {
				log_format main '$remote_addr - $remote_user [$time_local] $status '
					'"$request" $body_bytes_sent "$http_referer" '
					'"$http_user_agent" "$http_x_forwarded_for"';
				access_log logs/access.log main; // TODO: what does main mean?
				server { access_log logs/different.access.log main; }
			}
		errors:
			error_log logs/error.log; // in top, http, or server block?

		rotation // prevent logs from getting too big and unmaintainable
			// see https://www.nginx.com/resources/wiki/start/topics/examples/logrotation/

	ssl: // for https
		see "./ssl"



config
	location:
		- default.conf // see example using docker
		- /etc/nginx/sited-enabled/example.com // Ubuntu/Debian
		- /etc/nginx/conf.d/nginx.conf // RHEL/CentOS

	edit-flow:
		- vi config.location
		- nginx -t // validate changes
		- service nginx restart
			alt: sudo service nginx reload // diff?
			alt: /etc/init.d/nginx restart
			alt: /usr/sbin/nginx -s reload

	syntax:
		# comment, in main block/context
		block_name {
			directive value $variable // directives in inner block overrides same directive in outer block
				value3;
			other_block block_argument {}
		}
	block-structure:
		main: Block // outside any other block
			http: Block
				upstream: Block
				server: Block
					location: Block


	location block matching rules:
		location /uploaddir {}
		location ~ \.js$ {} // "~" enables regex (see regex) (perl compatible)
	named location blocks // ?
		server {
			location / { try_files $uri $uri/ @proxy; }
			location @proxy { ... }
		}

	directives:
		in any block:
			include /abs/path/file.conf // include is like copy 'n paste', during parse time
			include /abs/path/*.server.conf // ability to use wildcards to include many
			
			root /some/abs/path; // sets $document_root, base path for try_files, default index, etc
			index index.html index.htm; // what to do if directory is requested

		in server block: // applies custom config on matching requests (especially port)
			listen 80 default_server; // activate for port 80, any domain name/IP
			listen [::]:80 default_server; // for IPv6
				prefer ip instead of hostname in listen // hostname/domainname requires resolve which might always work timely during start
				example:
					upstream { server http://10.48.41.12; }
					server { listen 127.0.0.16:80; }

			server_name example.com; // only use the block/server if "domain name" matches
				// how to match default_server and server_name? just skip the server_name part...
				// aka "reverse-proxy" if used
			server_name www.example.com example.com; // list multiple
			server_name *.apps.example.com; // wildcards

		in location block: // applies custom config on matching requests
			try_files some-file.html =404; // send file at path (relative to root directive) if exists
			try_files non-existing.file =404; // ... or return (see error_page) with http status code 404 (not found)
			try_files $uri; // use variable for path
			try_files $uri/; // path ending with / -> try (index directive) in that folder
			try_files $uri $uri/ /index.html; // list multiple, tries from left to right

			caching:
				expires 30d; // more caching options (anymore necessary)? see features.caching
		
		in location or server block:
			return 404; // send status code (and related error_page) + end response (close connection?)
			return 301 $scheme://example.com$request_uri; // permanent redirect

			rewrite: // TODO
				rewrite ^ example.com permanent; // rewrites relative by default; domain.com/path/ -> domain.com/path/example.com
				rewrite ^ https://example.com permanent; // force abs

				rewrite ^/(.*)$ http://example.com/$1 permanent;
				rewrite ^ http://example.com$request_uri? permanent;
				return 301 http://example.com$request_uri;

		' other:
			default_type application/octet-stream;

	variables:
		// TODO
		
		// eg. for: https://www.domain.tld/some/path/?query=value&string=v#fragment
		$uri // path after domain name? eg. "/some/path/"
		$args // querystring? eg. "query=value&string=v"
		$request_uri // path + querystring + fragment? "/some/path/?query=value&string=v#fragment"
		$scheme // before colon? "https"
		$host // "domain name", eg. www.domain.tld, set by client through header ?
		$server_name // what got matched with the server_name directive, usually similar to $host, but empty if used wildcard (server_name _;)

		$document_root // see directive.root



monitoring: // TODO
	see features.logging
	// TODO: monitoring that listens on logfiles and sends to db in batches for analysis?
	// see https://www.nginx.com/blog/monitoring-nginx/
	// see https://amplify.nginx.com/login
	// 	- free to use for up to 5 monitored servers



performance-optimization:
	see caching
	see compression
	see loadbalancer

	// TODO:
	// see https://www.nginx.com/blog/tuning-nginx/
	linux config:
		- "backlog queue"
		- "file descriptors"
		- "ephemeral ports"
	nginx config:
		- worker_processes // ? eg. worker_processes 5; // Default: 1
			worker_connections // ? eg. events { worker_connections 4096; } // Default: 1024
			// what is worker_rlimit_nofile 8192; ?
		- keepalive
			keepalive_timeout
			keepalive_requests
		- access logging
		- sendfile
		- limits


' config.other:// in top scope
	user www www; // Default: nobody
	pid logs/nginx.pid; // what's this used for?
	example:
		### tcp ###
		tcp_nodelay off;
		tcp_nopush on;
		sendfile on;
		keepalive_requests 100;
		### timeouts ###
		resolver_timeout 6;
		client_header_timeout 30;
		client_body_timeout 60;
		send_timeout 60;
		keepalive_timeout 65 20; // tradeof between what and what?
		### buffers ###
		client_header_buffer_size 1k;
		client_body_buffer_size 128k;
		large_client_header_buffers 4 4k;
		client_max_body_size 10m;
		client_body_temp_path /var/spool/nginx/client/;
		output_buffers 1 32k;
		postpone_output 1460;

' robots:
	// https://stackoverflow.com/questions/9090577/what-is-the-http-header-x-xss-protection
	// add_header X-Robots-Tag none; # really wanted?
	// https://developers.google.com/search/reference/robots_meta_tag

// other references:
// https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
// https://www.nginx.com/resources/wiki/start/topics/examples/fullexample2/
// https://github.com/fcambus/nginx-resources
// https://www.nginx.com/resources/wiki/start/topics/examples/SSL-Offloader/
