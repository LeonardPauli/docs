# backend/graphql/apollo-server
' LeonardPauli/docs
	Created by Leonard Pauli, 8 oct 2018

// an implementation of the server-side part of the graphql specification
// https://www.apollographql.com/

basic-usage: see example/minimal/setup

# TODO:
- monitoring // see https://www.apollographql.com/docs/apollo-server/features/metrics.html
- access-control
- security // https://www.apollographql.com/docs/guides/security.html
- versioning
- file uploads
- subscriptions // see https://www.apollographql.com/docs/apollo-server/features/subscriptions.html
- custom scalars // https://www.apollographql.com/docs/apollo-server/features/scalars-enums.html
- custom directives // https://www.apollographql.com/docs/apollo-server/features/creating-directives.html
	// https://blog.apollographql.com/reusable-graphql-schema-directives-131fb3a177d1
	built-in:
		- @deprecated(reason: String)
		- @skip(if: Boolean!)
		- @include(if: Boolean!)
	custom.use-cases:
		- documentation + tooling meta notes: eg. @deprecated(reason: String)
		- resolver generation: people: [Person] @rest(url: "/api/v1/people") // automatically fetch from rest endpoint
		- add formatting options: today: Date! @date(defaultFormat: "mmmm d, yyyy")
		- internationalization: greeting: String! @intl
			// https://www.apollographql.com/docs/apollo-server/features/creating-directives.html#Marking-strings-for-internationalization
			const { ApolloServer, gql, SchemaDirectiveVisitor } = require("apollo-server");
			class IntlDirective extends SchemaDirectiveVisitor {
				visitFieldDefinition(field, details) {
					const { resolve = defaultFieldResolver } = field;
					field.resolve = async function (...args) {
						const context = args[2];
						const defaultText = await resolve.apply(this, args);
						// In this example, path would be ["Query", "greeting"]:
						const path = [details.objectType.name, field.name];
						return translate(defaultText, path, context.locale);
					};
				}
			}
			const server = new ApolloServer({
				typeDefs: gql`
					directive @intl on FIELD_DEFINITION
					type Query { greeting: String @intl }`,
				schemaDirectives: { intl: IntlDirective },
			});
			server.listen().then(({url})=> console.log(`server ready at ${url}`));
		- authorization: @auth(requires: ADMIN)
			directive @auth(requires: Role = ADMIN) on OBJECT | FIELD_DEFINITION
			enum Role {ADMIN, REVIEWER, USER, UNKNOWN}
		- validation: title: String! @length(max: 50)
		- generation: id: String! @uniqueId
- rest wrapper // see https://www.apollographql.com/docs/apollo-server/features
- dataloader? // https://www.apollographql.com/docs/apollo-server/features/data-sources.html#What-about-DataLoader
- ApolloServer.constructor:
	const server = new ApolloServer({
		typeDefs,
		resolvers,
		dataSources: ()=> ({
			moviesAPI: new MoviesAPI(),
			personalizationAPI: new PersonalizationAPI(),
		}),
		context: ()=> ({
			token: 'foo',
		}),
		schemaDirectives: { intl: IntlDirective },
		cache: new RedisCache({ // if running multiple apollo-server server instances, to share entity/db/extarnal resources caching between them
			// const { RedisCache } = require('apollo-server-cache-redis');
			host: 'redis-server',
			// Options are passed through to the Redis client
			// see https://github.com/NodeRedis/node_redis
		}),
	});
- performance: https://www.apollographql.com/docs/guides/performance.html

apollo-client:
	apollo-link-state // https://www.apollographql.com/docs/guides/state-management.html
		@client directive // allows queries to combine server-side + local data
	testing with mocked server: see "https://www.apollographql.com/docs/guides/testing-react-components.html"
