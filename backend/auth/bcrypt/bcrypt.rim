# backend/auth/bcrypt
' LeonardPauli/docs
	Created by Leonard Pauli, 10 oct 2018

// "password hashing function based on the blowfish cipher"

' see
	https://en.wikipedia.org/wiki/Bcrypt
	https://medium.com/@danboterhoven/why-you-should-use-bcrypt-to-hash-passwords-af330100b861
	https://auth0.com/blog/hashing-in-action-understanding-bcrypt/

when computers gets faster, brute-forcing becomes easier
	-> change bcrypt.rounds alongside moorse-law
		- hash.duration(high-end laptop ~2018): 2^(rounds-10) * 64ms
			// ie. ~16 hashes/s for 10 rounds // 1/(2^(10-10) * 64/1000) â‰ˆ 16

flow:
	- on user.signup with (id, password.plain-text)
		salt: bcrypt.salt.generate{rounds: 10}
		hash: (password.plain-text, salt) | bcrypt.hash
		db.user.store (id, hash)
	- on user.login with (id, password.plain-text)
		hash: db.user.get with id | .hash
		matches: bcrypt.compare(password.plain-text, hash)
		return ok if matches else fail


nodejs.usage // see ./example
	- npm i bcrypt // see bcrypt if issues
		if pre-built library not available:
			might be that npm uses older version
				- npm info bcrypt
				- npm i bcrypt@3.0.1 // use latest
				// possible also try installing bcrypts dependencies independently first with latest version
			will try to compile locally // might be trouble-some
				requirements: node-gyp
					node-gyp: "Node.js native addon build tool"
						npm i -g node-gyp
	- vi hashPassword.js // see file, just a wrapper
	- vi api.js // example usage of wrapper for login/signup
	- npm i -D jest
	- vi index.test.js // example usage of api
	- npm run test

	durations:
		genSalt: ~5ms
			// $2b$10$aiGiwRB1nz0NtxlTrH.GKu
		hash{rounds 10}: ~64ms (high-end laptop ~2018)
			// $2b$10$4hp01RizLtDArFMRul2zyepbEeNseparCDxktDO4wQsoViE5Wkw2G
		compare: ~same as hash
