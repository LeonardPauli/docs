# backend/auth/account-service
' LeonardPauli/docs
	Created by Leonard Pauli, 14 oct 2018

// multiple-accounts+logins+roles

idea:
	in short:
		- one person
		- multiple logins
		- under one account
		- managing multiple platform users
			// TODO: limit data stored in token (that is passed for each request!), if many users, refer to groups?
				// if many users with all different roles.. request different tokens for each and change/send multiple client-side?
					// naah, edge-case, have it refer to server-side stored acl-list...
		- with different roles/permissions
			// TODO: revoking this should have immediate effect! prime use-case of in-memory token invalidation! 
			// TODO: custom expiry dates per permission? eg. "accountant should have economy-permission for this week"
		- with different security clearance level on tokens
		technical:
			- utilizing isolated accounts service
				- with other services being able to verify token (containg account info) from client directly using public key (ie. without db/api lookup/call)
			- with immediate revokation ability (roles/permissions/logins/accounts)
			- with token refresh functionality
			- with ability to merge/split accounts and change credentials (eg. change email/password, etc)
			- ...
		-> in api, ability to declaratively specify per model or field
			' receipt is Receipt @auth(or: [isOwner, isAccountantOwner]) @auth.read(or: [hasEconomyViewPermission])
				- isOwner: {fieldEqualsUserId: .owner}
				- isAccountantOwner: {hasRole: accountant, forUserIdFromField: .owner}
				- hasEconomyViewPermission: {hasPermission: economy.view, forUserIdFromField: .owner}
				- ...

	- one person has one account (Account)
		- multiple login paths (AccountCredential):
			- client id
			- email (login-link)
			- id(eg. username/email/phrase) + password
			- 3rd party: google, twitter, bankid, ...
			- ...
		- can control multiple platform "users" (User):
			- eg. has one private + one public + one public in another name
			-> link: AccountUser
			- can have different levels of control (Role)
				- eg. "manager" or "is"
	- actions require both correct role for action + certain security level of login
		- different AccountCredential implies different levels of security
		- factors can be combined to show higher identity security certainty
			factors: credentials + other measures (eg. client meta-data/ip/time-access-patterns/geo-location/etc)
			combined: (eg. 2FA/MFA + sms/authenticator-app codes, etc)
			- generate + sign new token with higher security clearance + shorter expiry
				- token.refresh will refresh with lower/usual security clearance + expiry
		- for extra high security clearances: combine with server-side sessions
			// (ie. don't rely on client token validity, should be superfluous/paranoid, though never be too careful?)
			eg. token contains session id -> lookup token payload in db


# implementation example + usage notes

- jwt
- koa
- prisma
- grapgql

api.db{internal}: prisma
	schema:

		// auth.service

		- TokenRefresh
			id is String, unique, pk
			expireAt is Date
			credential is AccountCredential

		// - TokenInvalidated<> @in-memory
		// 	{key: Account.id, value: {expireAt.min is Date, removeAt is Date}}

		- AccountCredential is Interface
			account is Account
		- AccountCredentialPassword is AccountCredential // eg. for one string, split into two client-side (id, password | hash)
			id is String, unique, pk // change of id: create new AccountCredential and discard old one
			hash is String
		' - AccountCredentialEmail is AccountCredential
			// usually used in combination with AccountCredentialPassword
			// 	(id is email, always reserve that one though)
			// but standalone through "login-link-email" as well
			email is String, unique, pk, validate{type: .email}
			verified is Boolean{default: false}

		- Account
			id is Id, unique, pk
			credentials is many AccountCredential @computed
			users is many AccountUser

		- AccountUser
			id is Id, unique, pk
			accounts is many Account @computed
			user is User
			roles is many Role

		- Role
			name is String, unique, pk


		// main.service

		- User
			id is UUID, unique, pk
			account is AccountUser @computed

			name is String
			...

	- db: postgres
	- api: graphql{schema | prisma}

api.main
	dependency: api.db

	koa.middleware:
		- /graphql
			- auth.middleware.koa
			- graphql.server

	graphql
		schema:
			- UserModule
				login
				signup
				me @auth(role: user)
					-> ctx.user.load
				nameChange
					ctx.user.load.
			- AccountModule
				tokenRefresh
				passwordChange
				// connectAccount??
				' emailChange
		server: ApolloServer{schema}

	on startup:
		on initsend with credentials: send credentials to: .env.new_admin_account_email if exists and email.service exists else console.print
		if db.accounts(role: ADMIN, password.changeRequired)
			pass: do password.random.generate
			do account.password.hash = do hash(pass)
			do initsend {pass}
		if db.accounts is empty
			pass: do password.random.generate
			do create User{name: "admin", account: Account{role: ADMIN, password{changeRequired: true, hash: do password.hash(pass)}}}
			do initsend {pass}

	auth
		middleware.koa
			header.token | or:
				- exists: | auth.token.decodeAndVerify | ctx.user = {...it, load: auth.loadUser it, hasRole: auth.hasRole{it}}
				- else: ctx.user = User.guest
		token
			decodeAndVerify
			encodeAndSign
		loadUser token.payload: api.db ...
		hasRole{token.payload} role: token.payload.roles.includes(role)
		...api.account



'
	- prisma
		graphql model schema -> postgres db, internal graphql api
	- api
		graphql query schema -> directives -> (manual, autogenerated) resolvers -> graphql api
			directive:
				// - @resolveProxy(type: list, model: User)
				- @public // same as @auth(role: ANY)
				- @auth(role: ADMIN) // require ctx.user.roles.inclues('ADMIN')
					// @auth defaults to @auth(role: ADMIN)
			mutation:
				- signup
				- login
				- tokenRefresh
	- AccountAPI
