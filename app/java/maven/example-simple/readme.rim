# app/java/maven/example-simple
' LeonardPauli/docs
	Created by Leonard Pauli, 18 sept 2018

prerequisites:
	- JDK 10
	- maven

build-steps:
	- mvn install
	- mvn package
	- java -jar target/*.jar
	// - mvn test // included in mvn package

definitions:
	jar: "Java ARchive" // zip'ed folder of .class files (and possibly .java source files) + resources
	.java file // java source code
	.class file // compiled .java file containing bytecode executable by JVM
	JVM: "Java Virtual Machine"
	JDK: "Java Development Kit"

structure:
	pom.xml // containing maven project config (plugins, dependencies, JDK version, artifacts, etc)
	src
		main
			META-INF/MANIFEST.MF
				Manifest-Version: 1.0
				Main-Class: com.myorg.mypackage.Main // specifies entrypoint class for jar (will invoke its "public static void main")
			java/com/myorg/mypackage/Main.java // use reverse domain notation for "package", inside java folder
		test
			java/com/myorg/mypackage/MainTest.java // convention <Class>Test.java, folder structure should mirror main/java
	.gitignore // ignore target/ dir containing maven output


test (using junit 5):
	// for @Disable to work etc, extra maven plugin necessary, see ../example-junit5-improved.pom.xml
	requirements:
		- directory: src/test/java/{mirror class-to-be-tested-path}/{class-name}Test.java // has to end in Test.java
		- package has to be same as class to test
		- class name has to be same as filename
		- class has to be public
		- methods:
			- has to be public
			- has to start with "test", eg. "public void testSomething() {...}"
	example:
		package com.myorg.mypackage.mysub;
		import org.junit.jupiter.api.Test;
		import static org.junit.jupiter.api.Assertions.assertEquals;
		public class MainTest {
			@Test
			public void testMain() { assertEquals(2, 1 + 1); }
		}
