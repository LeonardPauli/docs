# app/java/class
' LeonardPauli/docs
	Created by Leonard Pauli, 14 sept 2018
	based on https://docs.oracle.com/javase/tutorial


casting.up:
	if (obj instanceof MountainBike) {
		MountainBike myBike = (MountainBike)obj;
	}

class.abstract: // similar to something between a class and an interface
	example: // ... abstract class MyClass { ... }
		abstract class GraphicObject {
			static R = 7;
			int x, y;
			...
			void moveTo(int newX, int newY) { ... }
			abstract void draw();
			abstract void resize();
		}
	usage:
		class Circle extends GraphicObject {
			void draw() { ... GraphicObject.R == Circle.R ... } // ?
			void resize() { ... }
		}
	- cannot be instantiated
	- can be subclassed
	- can contain:
		- methods
			- abstract // ie. methods without implementation
				// which has to be implemented in non-abstract subclasses
			- public / protected / private with implementation
		- fields // even those that are not static or final

class:
	example:
		public class RectanglePlus implements GroupedInterface {
			public int width = 0;
			public int height = 0;
			public Point origin;

			// constructor
			public RectanglePlus() { origin = new Point(0, 0); }
			public RectanglePlus(Point p) { origin = p; } // implicitly "this.origin"

			public int getArea() { return width * height; } // method
		}
	body:
		- method: ...
		- field
			- final // prevents subclass override
	inheritance:
		- in overriding method, ability to invoke super.method...(...)
		- in overriding constructor, ability to invoke super(...)
		- subclass does not inherit the private members of its parent class
		- nested class has access to all the private members of its enclosing class // overriding above statement
		- field hiding/shadowing: if subclass has field named the same as super, super's value can be accessed like super.field...
			class Animal {age = 5;} // does it have to be public age?
			class Dog extends Animal {age=7; int[] p() {return [age, this.age, super.age]}}
			Dog dog = new Dog(); dog.p() == [7, 7, 5]

	master base-class Object:
		// see https://docs.oracle.com/javase/tutorial/java/IandI/objectclass.html
		- public boolean equals(Object obj);
		- public String toString();
		- public final Class getClass(); // not overridable
			// eg. obj.getClass().getSimpleName()
		- public void finalize() throws Throwable; // override to provide cleanup, eg. file descriptor closing
			// possibly called by GC, but close/clean yourself when possible
		// - protected Object clone() throws CloneNotSupportedException
		// - public int hashCode()
		- ...
	good practice:
		few fields, many methods using those fields
		structure:
			- Game.Board // nested class; class Game { class Board {...} }
			- import package.Game.Board // package/Game/Board.java
			- GameBoard
