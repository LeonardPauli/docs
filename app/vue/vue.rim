# app/vue
' LeonardPauli/docs
	Created by Leonard Pauli, 18 apr 2018

// web app framework

prerequisites:
	- see app.spa.get dev-dependencies.fundamental

definitions:
	cli: "Command Line Interface"

cli:
	// https://github.com/vuejs/vue-cli
	install: npm i -g @vue/cli
	serve:
		prerequisite:
			- npm i -g @vue/cli-service-global
		- uses global dependencies
		- single vue file
			- echo '<template><h1>Hello</h1></template>' > App.vue
			- vue serve App.vue
		- auto-detect: vue serve
			entrypoint: main.js, index.js, App.vue, app.vue or the one specified (eg. vue serve myentrypoint.js/.vue)
			optionally in same dir:
				- index.html
				- package.json with installed local deps
				- config files for babel, postcss and eslint (etc?)

generate boilerplate project
	- `vue create -m npm my-app`, follow instructions // vue create -m npm base
		// (vue-router, stylus, babel, pwa, eslint, unit-jest, e2e-cypress)
		// You can now open Cypress by running: node_modules/.bin/cypress open
		// https://on.cypress.io/installing-cypress
		// added 1820 packages in 136.223s + added 74 packages, updated 1 package and moved 2 packages in 10.866s
	- start project
		- `cd my-app`
		- `npm run dev`
	- open project in text editor and browser
	- change code, save file, see changes update live in browser
	- auto lint fix
		> `npm i -d onchange`
		> `"lint:watch": "onchange '{{src}/**,.}/*.vue' -d 200 -w -- yarn lint {{changed}}",`

get started:
	- npm i // install dependencies
	- npm run serve // to start dev server, it will auto-open browser or say how to do it
	- npm run lint:watch // turn on auto-lint-fix on save
	- git add . // stage all changes
	- git commit -m "what you did" // commit staged changes
	- git push // push commits
	- git pull // pull new commits
	- npm run build // create a package ready for production in /dist, just upload it to a server


utils:
	vue_file_html_to_pug:
		// for once through UI, see "http://html2jade.org/"
		- npm i -g html2pug
		- add script
			# see terminal/lib.sh/(replace_multiline_enclosed, sponge)
			vue_file_html_to_pug () {
				# vue_file_html_to_pug < View.vue | sponge View.vue
				fn () {
					echo '<template lang="pug">' 
					html2pug -f -t
					echo '</template>'
				}
				cat | replace_multiline_enclosed '<template>' fn '<\/template>'
			}
		- for f in src/**/*.vue; do vue_file_html_to_pug < "$f" | sponge "$f"; done
